def gameOfLife(board):
        """
        Do not return anything, modify 'board' in-place instead.
        This function computes the next state of the Game of Life board.
      
        Rules for the Game of Life:
        1. Any live cell with fewer than two live neighbors dies, as if caused by underpopulation.
        2. Any live cell with two or three live neighbors lives on to the next generation.
        3. Any live cell with more than three live neighbors dies, as if by overpopulation.
        4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
        """
        rows = len(board)
        cols = len(board[0])
        neighbors = [(0,1),(0,-1),(1,0),(-1,0),(1,1),(1,-1),(-1,1),(-1,-1)]
        for i in range(rows):
            for j in range(cols):
                live_neighbors = 0
                for neighbor in neighbors:
                    r = i + neighbor[0]
                    c = j + neighbor[1]
                    if r < rows and r >= 0 and c < cols and c >= 0 and abs(board[r][c]) == 1:
                        live_neighbors += 1
                if board[i][j] == 1 and (live_neighbors < 2 or live_neighbors > 3):
                    board[i][j] = -1
                if board[i][j] == 0 and live_neighbors == 3:
                    board[i][j] = 2
        for i in range(rows):
            for j in range(cols):
                if board[i][j] > 0:
                    board[i][j] = 1
                elif board[i][j] <= 0:
                    board[i][j] = 0
        return board


print(gameOfLife([[0,1,0],[0,0,1],[1,1,1],[0,0,0]])) # [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]